version: 0.2
env:
  variables:
    PRIMERA_LAMBDA: "yfinance_a_ddb"
    SEGUNDA_LAMBDA: "ejecutar_notebook"
    CAPA_PD_YF: "capa_pd_yf"
    LAYER_PREFIX: "arn:aws:lambda:us-east-1:891377103104:layer"
    REGION: "us-east-1"
    COD_USER: "891377103104"
    ROL_PRIMERA_LAMBDA: "rol_primera_lambda"
    NOMBRE_BUCKET: "almacenamiento-primario"
phases:
  install:
    runtime-versions:
      python: 3.13  
    commands:
      - echo "Instalación de dependencias"
      - mkdir -p python
      - pip install -r requirements.txt -t python --no-cache-dir
  build:
    commands:
      - echo "Paquetes con dependencias y código"
      - zip -r9 dependencies_layer.zip python -x "*/__pycache__/*" "*.dist-info/*" "*.egg-info/*" || exit 1
      - zip -r9 lambda_yfinance_s3.zip lambda_yfinance_to_dynamo.py || exit 1
      - zip -r9 lambda_ejecutar_notebook.zip lambda_ejecutar_notebook.py || exit 1
      - zip -r9 lambda_s3_athena.zip lambda_s3_to_athena.py || exit 1
      - du -sh dependencies_layer.zip
  post_build:
    commands:
      - echo "Crear S3 si no existe"
      - |
        if ! aws s3api head-bucket --bucket $NOMBRE_BUCKET >/dev/null 2>&1; then
          echo "Bucket S3 no existe, creando";
          aws s3api create-bucket --bucket $NOMBRE_BUCKET --region $REGION
        else
          echo "Bucket S3 ya existe"
        fi

      - echo "Crear roles si no existen"
      - |
        if ! aws iam get-role --role-name $ROL_PRIMERA_LAMBDA >/dev/null 2>&1; then
          echo "Rol no existe, creando"
          aws iam create-role --role-name $ROL_PRIMERA_LAMBDA --assume-role-policy-document file://trust-politica.json;
          aws iam put-role-policy --role-name $ROL_PRIMERA_LAMBDA --policy-name S3AccesoCompleto --policy-document file://s3-politica.json;
          aws iam attach-role-policy --role-name $ROL_PRIMERA_LAMBDA --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole;
          sleep 10 # Esperar por si acaso
        else
          echo "Rol ya existe"
        fi
        aws iam get-role --role-name $ROL_PRIMERA_LAMBDA --query 'Role.AssumeRolePolicyDocument' --output json

      - echo "Actualizar capas de la Lambda"
      - aws lambda publish-layer-version --layer-name $CAPA_PD_YF --zip-file fileb://dependencies_layer.zip --compatible-runtimes python3.13 || exit 1
      - LAYER_VERSION=$(aws lambda list-layer-versions --layer-name $CAPA_PD_YF --query 'LayerVersions[0].Version' --output text)


      ################################################################
      ################################################################
      # LAMBDAS

      - echo "Actualizar la Lambda Yfinance -> DynamoDB, si no crearla"
      - |
        if ! aws lambda get-function --function-name $PRIMERA_LAMBDA >/dev/null 2>&1; then
          echo "Función no existe, creando"
          aws lambda create-function --function-name $PRIMERA_LAMBDA --runtime python3.13 --role arn:aws:iam::$COD_USER:role/$ROL_PRIMERA_LAMBDA --handler lambda_function.lambda_handler --zip-file fileb://lambda_yfinance_s3.zip --timeout 30 --memory-size 256
        else
          echo "Función ya creada, actualizando..."
          aws lambda update-function-code --function-name $PRIMERA_LAMBDA --zip-file fileb://lambda_yfinance_s3.zip || exit 1
          aws lambda wait function-updated --function-name $PRIMERA_LAMBDA
        fi
        aws lambda update-function-configuration --function-name $PRIMERA_LAMBDA --layers $LAYER_PREFIX:$CAPA_PD_YF:$LAYER_VERSION || exit 1

      - echo "Actualizar la Lambda Ejecutar Notebook, si no crearla"
      - |
        if ! aws lambda get-function --function-name $SEGUNDA_LAMBDA >/dev/null 2>&1; then
          echo "Función no existe, creando"
          aws lambda create-function --function-name $SEGUNDA_LAMBDA --runtime python3.13 --role arn:aws:iam::$COD_USER:role/$ROL_PRIMERA_LAMBDA --handler lambda_function.lambda_handler --zip-file fileb://lambda_ejecutar_notebook.zip --timeout 30 --memory-size 256
        else
          echo "Función ya creada, actualizando..."
          aws lambda update-function-code --function-name $SEGUNDA_LAMBDA --zip-file fileb://lambda_ejecutar_notebook.zip || exit 1
          aws lambda wait function-updated --function-name $SEGUNDA_LAMBDA
        fi

      - echo "Actualizar la Lambda S3 to Athena, si no crearla"
      - |
        if ! aws lambda get-function --function-name $TERCERA_LAMBDA >/dev/null 2>&1; then
          echo "Función no existe, creando"
          aws lambda create-function --function-name $TERCERA_LAMBDA --runtime python3.13 --role arn:aws:iam::$COD_USER:role/$ROL_PRIMERA_LAMBDA --handler lambda_function.lambda_handler --zip-file fileb://lambda_s3_athena.zip --timeout 30 --memory-size 256
        else
          echo "Función ya creada, actualizando..."
          aws lambda update-function-code --function-name $TERCERA_LAMBDA --zip-file fileb://lambda_s3_athena.zip || exit 1
          aws lambda wait function-updated --function-name $TERCERA_LAMBDA
        fi
        
      
      - echo "Finalizado"
