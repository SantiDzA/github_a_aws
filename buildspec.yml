version: 0.2
env:
  variables:
    PRIMERA_LAMBDA: "yfinance_a_ddb"
    SEGUNDA_LAMBDA: "ejecutar_notebook"
    TERCERA_LAMBDA: "s3_a_athena"
    CAPA_PD_YF: "capa_pd_yf"
    REGION: "us-east-1"
    ROL_L_DDB: "rol_l_ddb"
    ROL_L_DDB_S3: "rol_l_ddb_s3"
    ROL_L_S3_ATH: "rol_l_s3_ath"
    ROL_CRAW: "rol-crawler"
    NOM_ATH: "base_athena"
    NOM_BUCKET: "almacenamiento-primario"
    NOM_CRAW: "crawler-datos"
    NOM_DDB: "my_finance_table"
phases:
  install:
    runtime-versions:
      python: 3.13  
    commands:
      - echo "Obtención de código de usuario"
      - COD_USER=$(aws sts get-caller-identity --query "Account" --output text)
      - export COD_USER
      - echo "Instalación de dependencias"
      - mkdir -p python
      - pip install -r requirements.txt -t python --no-cache-dir
      - mkdir -p statsmodel_package/python
      - pip install statsmodels -t statsmodel_package/python --no-cache-dir
  build:
    commands:
      - echo "Paquetes con dependencias y código"
      - zip -r9 dependencies_layer.zip python -x "*/__pycache__/*" "*.dist-info/*" "*.egg-info/*"
      - zip -r9 lambda_yfinance_s3.zip lambda_yfinance_to_dynamo.py
      - zip -r9 lambda_ejecutar_notebook.zip lambda_ejecutar_notebook.py forecast_aws.py
      - zip -r9 lambda_s3_athena.zip lambda_s3_to_athena.py
      - cd statsmodel_package
      - zip -r9 statsmodels_package.zip python -x "*/__pycache__/*" "*.dist-info/*" "*.egg-info/*"
      - cd ..
  post_build:
    commands:
      ################################################################
      ################################################################
      # CREACIÓN DE BASES DE DATOS, S3...
      - echo "Crear DynamoDB si no existe"
      - |
        if ! aws dynamodb describe-table --table-name $NOM_DDB --region $REGION >/dev/null 2>&1; then
          aws dynamodb create-table --table-name $NOM_DDB --attribute-definitions AttributeName=fecha,AttributeType=S --key-schema AttributeName=fecha,KeyType=HASH --billing-mode PAY_PER_REQUEST
          aws dynamodb wait table-exists --table-name $NOM_DDB --region $REGION
        else
          echo "Base de datos DynamoDB ya existe."
        fi

      - echo "Crear S3 si no existe"
      - |
        if ! aws s3api head-bucket --bucket $NOM_BUCKET >/dev/null 2>&1; then
          echo "Bucket S3 no existe, creando. También añadimos el archivo ZIP con el paquete statsmodels";
          aws s3api create-bucket --bucket $NOM_BUCKET --region $REGION
          aws s3api put-object --bucket $NOM_BUCKET --key layers_lambda/
          aws s3api put-object --bucket $NOM_BUCKET --key datos/
          aws s3api put-object --bucket $NOM_BUCKET --key query_results/
          cd statsmodel_package
          aws s3 cp statsmodels_package.zip s3://$NOM_BUCKET/layers_lambda/
          cd ..
        else
          echo "Bucket S3 ya existe"
        fi

      ################################################################
      ################################################################
      # CREACIÓN DE ROLES.
      - echo "Crear roles si no existen"
      - |
        if ! aws iam get-role --role-name $ROL_L_DDB >/dev/null 2>&1; then
          echo "Rol para interactuar con DDB no existe, creando"
          aws iam create-role --role-name $ROL_L_DDB --assume-role-policy-document file://rol-politica-lambda.json;
          aws iam put-role-policy --role-name $ROL_L_DDB --policy-name DDBAccesoCompleto --policy-document file://ddb-politica.json;
          aws iam put-role-policy --role-name $ROL_L_DDB --policy-name LambdaInvocar --policy-document file://invocar-lambda-politica.json;
          aws iam attach-role-policy --role-name $ROL_L_DDB --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole;
          sleep 10 # Esperar por si acaso
        else
          echo "Rol ya existe"
        fi

      - |
        if ! aws iam get-role --role-name $ROL_L_DDB_S3 >/dev/null 2>&1; then
          echo "Rol para interactuar con DDB y S3 no existe, creando"
          aws iam create-role --role-name $ROL_L_DDB_S3 --assume-role-policy-document file://rol-politica-lambda.json;
          aws iam put-role-policy --role-name $ROL_L_DDB_S3 --policy-name DDBAccesoCompleto --policy-document file://ddb-politica.json;
          aws iam put-role-policy --role-name $ROL_L_DDB_S3 --policy-name S3AccesoCompleto --policy-document file://s3-politica.json;
          aws iam put-role-policy --role-name $ROL_L_DDB_S3 --policy-name LambdaInvocar --policy-document file://invocar-lambda-politica.json;
          aws iam attach-role-policy --role-name $ROL_L_DDB_S3 --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole;
          sleep 10 # Esperar por si acaso
        else
          echo "Rol ya existe"
        fi

      - |
        if ! aws iam get-role --role-name $ROL_L_S3_ATH >/dev/null 2>&1; then
          echo "Rol para interactuar con Athena y S3 no existe, creando"
          aws iam create-role --role-name $ROL_L_S3_ATH --assume-role-policy-document file://rol-politica-lambda.json;
          aws iam put-role-policy --role-name $ROL_L_S3_ATH --policy-name S3AccesoCompleto --policy-document file://s3-politica.json;
          aws iam attach-role-policy --role-name $ROL_L_S3_ATH --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole;
          aws iam attach-role-policy --role-name $ROL_L_S3_ATH --policy-arn arn:aws:iam::aws:policy/AmazonAthenaFullAccess;
          sleep 10 # Esperar por si acaso
        else
          echo "Rol ya existe"
        fi

      - |
        if ! aws iam get-role --role-name $ROL_CRAW >/dev/null 2>&1; then
          echo "Rol para el crawler de Glue no existe, creando"
          aws iam create-role --role-name $ROL_CRAW --assume-role-policy-document file://rol-politica-glue.json;
          aws iam put-role-policy --role-name $ROL_CRAW --policy-name S3Acceso --policy-document file://s3-politica-crawler.json;
          aws iam attach-role-policy --role-name $ROL_CRAW --policy-arn arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole;
          sleep 10 # Esperar por si acaso
        else
          echo "Rol ya existe"
        fi

      ################################################################
      ################################################################
      # ATHENA Y GLUE
      - |
        if ! aws glue get-database --name $NOM_ATH >/dev/null 2>&1; then
          aws glue create-database --database-input '{"Name":"'$NOM_ATH'"}'
        else
          echo "Base de datos ya existe"
        fi
      
      - |
        if ! aws glue get-crawler --name $NOM_CRAW >/dev/null 2>&1; then
          aws glue create-crawler --name $NOM_CRAW  --role $ROL_CRAW --database-name base_athena --targets '{"S3Targets":[{"Path":"s3://'$NOM_BUCKET'/datos"}]}'                                     
        else
          echo "Crawler ya existe"
        fi

      ################################################################
      ################################################################
      # CAPAS DE LA LAMBDA
      - echo "Actualizar capas de la Lambda"
      - aws lambda publish-layer-version --layer-name $CAPA_PD_YF --zip-file fileb://dependencies_layer.zip --compatible-runtimes python3.13
      - LAYER_VERSION=$(aws lambda list-layer-versions --layer-name $CAPA_PD_YF --query 'LayerVersions[0].Version' --output text)

      ################################################################
      ################################################################
      # LAMBDAS

      - echo "Actualizar la Lambda Yfinance -> DynamoDB, si no crearla"
      - |
        if ! aws lambda get-function --function-name $PRIMERA_LAMBDA >/dev/null 2>&1; then
          echo "Función no existe, creando"
          aws lambda create-function --function-name $PRIMERA_LAMBDA --runtime python3.13 --role arn:aws:iam::$COD_USER:role/$ROL_L_DDB --handler lambda_yfinance_to_dynamo.lambda_handler --zip-file fileb://lambda_yfinance_s3.zip --timeout 30 --memory-size 256
          aws lambda wait function-active --function-name $PRIMERA_LAMBDA
        else
          echo "Función ya creada, actualizando..."
          aws lambda update-function-code --function-name $PRIMERA_LAMBDA --zip-file fileb://lambda_yfinance_s3.zip || exit 1
          aws lambda wait function-updated --function-name $PRIMERA_LAMBDA
        fi
        aws lambda update-function-configuration --function-name $PRIMERA_LAMBDA --layers arn:aws:lambda:us-east-1:$COD_USER:layer:$CAPA_PD_YF:$LAYER_VERSION || exit 1

      - echo "Actualizar la Lambda Ejecutar Notebook, si no crearla"
      - |
        if ! aws lambda get-function --function-name $SEGUNDA_LAMBDA >/dev/null 2>&1; then
          echo "Función no existe, creando"
          aws lambda create-function --function-name $SEGUNDA_LAMBDA --runtime python3.13 --role arn:aws:iam::$COD_USER:role/$ROL_L_DDB_S3 --handler lambda_ejecutar_notebook.lambda_handler --zip-file fileb://lambda_ejecutar_notebook.zip --timeout 30 --memory-size 256
          aws lambda wait function-active --function-name $SEGUNDA_LAMBDA
        else
          echo "Función ya creada, actualizando..."
          aws lambda update-function-code --function-name $SEGUNDA_LAMBDA --zip-file fileb://lambda_ejecutar_notebook.zip || exit 1
          aws lambda wait function-updated --function-name $SEGUNDA_LAMBDA
        fi
        aws lambda update-function-configuration --function-name $SEGUNDA_LAMBDA --layers arn:aws:lambda:us-east-1:$COD_USER:layer:$CAPA_PD_YF:$LAYER_VERSION || exit 1

      - echo "Actualizar la Lambda S3 to Athena, si no crearla"
      - |
        if ! aws lambda get-function --function-name $TERCERA_LAMBDA >/dev/null 2>&1; then
          echo "Función no existe, creando"
          aws lambda create-function --function-name $TERCERA_LAMBDA --runtime python3.13 --role arn:aws:iam::$COD_USER:role/$ROL_L_S3_ATH --handler lambda_s3_to_athena.lambda_handler --zip-file fileb://lambda_s3_athena.zip --timeout 30 --memory-size 256
          aws lambda wait function-active --function-name $TERCERA_LAMBDA
        else
          echo "Función ya creada, actualizando..."
          aws lambda update-function-code --function-name $TERCERA_LAMBDA --zip-file fileb://lambda_s3_athena.zip || exit 1
          aws lambda wait function-updated --function-name $TERCERA_LAMBDA
        fi
        
      - echo "Finalizado"
